{# A jinja helper function is provided by apstra, 'function.sorted_dict(dictionary)'.
   This is a helper function that sorts dictionary responses based on the dictionary key.
   This is helpful because a property-set may not be serialized or dumped in python
   memory in an order that a user would expect, and the order of the dictionary
   could end up changing between multiple blueprint commits or property-set mutations.
   Sorting the dictionary here ensures that vlans render in an expected order.

   For example, this renders 'vn1, vn3, vn30, vn102' in order.

   {% for key, value in function.sorted_dict(DICTIONARY) %}
      < sorted key-values here >
   {% endfor %}

   compared to a standard iteritems potentially rendering 'vn102, vn3, vn1, vn30':

   {%  for key, value in DICTIONARY.iteritems() %}
       < potentially unsorted key-values here >
   {% endfor %}

   For an example of why the template should convert a string to an int, consider:

>>> data = ['1', '2', '10', '20', '30']
>>> print(sorted(data))
['1', '10', '2', '20', '30']
>>> print(sorted([int(i) for i in data]))
[1, 2, 10, 20, 30]

In this case, config should use numerical sorting, not ascii/alphabetical sorting.
The default jinja dictsort() does not convert values to integers when sorting.

#}


{# This 'vlan' dictionary is purely driven by an example property-set.
  This property set is designed to instruct jinja when to render a vlan, on what
  systems, and with what options.

  This property set is in the format:

{
    "vlans": {
        "<VLAN_ID>": {
            "vrf_name": <VRF_NAME>, optional string. If VRF_NAME is not specified then it is assumed to be in the default routing instance.,
            "description": <DESCRIPTION, optional string>,
            "vxlan_id": <VXLAN_ID, optional integer>,
            "vlan_id": <VLAN_ID, required integer>,
            "ipv4_virtual_gateway_address": <IP Address without prefixlen, optional>
            "systems": {
                <SYSTEM HOSTNAME>: {
                    "ipv4_address": <UNIQUE IRB IPV4 ADDRESS WITH PREFIXLEN>,
                    "tagged_interfaces": [<LIST OF INTERFACE NAMES WITH VLAN TAGGING, optional strings>],
                    "native_interfaces": [<LIST OF INTERFACE NAMES THIS VLAN IS NATIVE VLAN FOR, optional strings>]
                }
            }
        }
    }
}

A system appearing in the 'systems' key requires an l2 footprint under the 'vlans'
stanza.
A system with an ipv4_address & the optional ipv4_gateway_address will render
virtual-gateway-address and other IRB configs required.
The tagged_interfaces list will set up ethernet tagging for this vlan on those
interfaces. Similarly, native_interfaces will set native vlan tag ID on those
interfaces.


With an example model:
{
    "vlans": {
        "30": {
            "vrf_name": "blue",
            "description": "blue_vxlan_30000",
            "vxlan_id": 30000,
            "vlan_id": 30,
            "ipv4_virtual_gateway_address": "10.0.30.254",
            "systems": {
                "leaf1": {
                    "ipv4_address": None,
                    "tagged_interfaces": ["et-0/0/3"],
                    "native_interfaces": ["et-0/0/4"]
                },
                "leaf2": {
                    "ipv4_address": None,
                    "tagged_interfaces": ["et-0/0/3"],
                    "native_interfaces": ["et-0/0/4"]
                },
                "leaf3": {
                    "ipv4_address": None,
                    "tagged_interfaces": ["et-0/0/3"],
                    "native_interfaces": []
                },
                "spine1": {
                    "ipv4_address": "10.0.30.1/24",
                    "tagged_interfaces": [],
                    "native_interfaces": []
                },
                "spine2": {
                    "ipv4_address": "10.0.30.2/24",
                    "tagged_interfaces": [],
                    "native_interfaces": []
                }
            }
        }
    }
}

        This is an example of modifying the structure of a property set and the
        according jinja.

        The vlan_id attribute is underneath the 'vlan' key instead of uniquely
        assigned on each system as an effort to keep the Jinja less complicated
        for documentation purposes. In a VXLAN/EVPN environment, the vlan ID is
        only locally significant within a device hosting a VTEP for this design.
        EVPN route generation or VXLAN encapsulation do not make use of the local
        vlan_id. In this example model, the VLAN ID is re-used for convenience.

        A common use-case is a distributed virtualization environment in which
        hypervisors may be configured with different vlan ID tags on their switch
        configurations.  As a VM live-migrates between these hosts, vxlan with
        local vlan IDs that match the hypervisors prevents traffic outages.

        Another use case is re-use of the same VLAN ID on every VTEP reduces
        the effective maximum count of VLANs to about 4094 (not accounting for
        platform asic overhead)


        This requires some a slight model and jinja change, and works to highlight
        small changes to jinja & property-set semantics can have easily do complex
        network engineering day 2 tasks with the assistance of the Freeform
        blueprint features.


        Changes:

        The 'vlan_id' key is currently the property set vlan ID index.
        At that point, change the following:

        The property_set key under 'vlans' is currently the vlan ID.
        The dictionary key 'vlan_id' becomes unclear, since it is now unique
        to each system.  The special variable '_' is typically used when
        the template does not require a variable name that is
        generated by a function.

        (Note: At this point, the dictionary key which used to
           share the vlan name is also non-unique,
           the 'description' could be used instead, but it is not necessary. )


        The rest of the Jinja is unchanged.

#}

{# This system_vlans variable is used for an indexed cache of all of the 'vlan info' that pertains to this specific system.

This makes use of |selectattr(), with a 'contains' test.  The 'contains' filter is
not stock Jinja, but it is implemented as the opposite of the 'in' filter.
The format is selectattr(<set of items>, 'contains', <value>)
In this case the value 'hostname' comes from the generated Apstra device model
dict, where hostname == the system node hostname from the graph.

The 'systems' key within the 'vlans' property set is structured as:

'systems': {
    'leaf1': {
        'ipv4_address': None,
        'tagged_interfaces': ['et-0/0/1', 'et-0/0/2'],
        'native_interfaces': [],
    },
    'spine1': {
        'ipv4_address': '10.0.0.1/24',
        'tagged_interfaces': [],
        'native_interfaces': [],
    }
},

This structure helps Jinja to understand what vlans to render on the system, how
to render their IRBs (if necessary), and how to tag member interfaces.
Finally, the systems_vlan collection is sorted based on vlan_id to add determininstic
ordering -- eg vn1, vn2, vn30, vn32, vn33 in order.
This is 'listified', as systems_vlans would otherwise be a python generator and
would be consumed after the first loop.  Converting it to a list ensures that it
would not be exhausted after its first use: system_vlans is used multiple times.

It is encouraged to sort all dictionary iterations as the ordering from the property
set JSON is not preserved when it is deserialized to python memory.
#}
{% set system_vlans = property_sets.get('vlans', {}).itervalues()|selectattr('systems', 'contains', hostname)|sort(attribute='vlan_id')|list %}


{#  This is a jinja 'namespace'. This is used to create some dictionary data
   structures that will be useful for associating the specific L2 member interfaces
   to their according vlan-id tags or native vlan tag ID on ethernet switching ports.

   In Jinja, a value that was defined outside of a 'for' loop cannot be changed
   within that for-loop: The variable assignment will suceed, but the scope of
   that change is only from within the loop.

   A 'namespace' allows the template designer to carry variables which were
   assigned within the loop and make it visible outside of the loop.
   This will create a structure similar to:

   vlan_ns = {
       tagged_interfaces: {
           'et-0/0/1': [30, 40],
           'et-0/0/2': [30, 31],
       },
       native_interfaces: {
           'et-0/0/1': 32,
           'et-0/0/1': 33,
       }
   }

   This structure will be used lower in the jinja for rendering ethernet-switching
   vlan membership configuration.
#}
{% set vlan_ns = namespace(tagged_interfaces={}, native_interfaces={}, rstp_interfaces=[]) %}
{% for vlan in system_vlans %}
    {# The 'vlan {}' stanza is only rendered if at least one vlan has a footprint
       on this system. Jinja has the functionality of understanding loop positions.
       Making use of features such as 'loop.first' and 'loop.last' allows the
       template to only render the stanza if at least one vlan exists on this
       system. Without this defense, the configuration deployment would fail
       with a commit-check error raised by junos for an invalid config section. #}

    {# Store the vlan_id as a variable for re-use below within this loop #}
    {% set vlan_id = vlan['vlan_id'] %}
    {# In the vlan property set, system-specific properties such as vlan membership,
       IRB addressing, etc are included under the 'systems' key, indexed by the
       system hostname. #}
    {% set system_vlan_properties = vlan['systems'][hostname] %}
    {# populate the vlan_ns namespace property 'tagged_interfaces' for use outside
       of the for loop.
       This will be used in jinja below for the 'interfaces' section.  This acts
       as an index to associate Tagged VLAN IDs to interface names.
       This index is defensive, as a user could add an invalid interface name that
       was not rendered by junos_interfaces.jinja in the property set.
       This will create the structure:
       vlan_ns.tagged_interfaces = {
          'et-0/0/1': [31, 32],
          'et-0/0/2': [42],
       }
    #}
    {% for intf_name in system_vlan_properties.get('tagged_interfaces', []) if intf_name in interfaces %}
        {% do vlan_ns.tagged_interfaces.setdefault(intf_name, []).append(vlan_id) %}
    {% endfor %}
    {# populate the vlan_ns namespace property 'native_interfaces' for use outside
       of the for loop.
       This will be used to associate a single optional native vlan ID for a
       switched ethernet port.  This will create the structure:
       vlan_ns.native_interfaces = {
            'et-0/0/1': <vlan_id>
       }
    #}
    {% for intf_name in system_vlan_properties.get('native_interfaces', []) if intf_name in interfaces %}
        {# Since property sets do not have schema validation, this is an example
           of adding some level of 'semantic correctness'.  The jinja function
           raise_error() can be used to throw a TemplateError generically with
           an error message controlled by the template author. Here, the config
           rendering will fail with an alert that the property set semantics are
           invalid: An interface can only be a member of a single native vlan.

           function.raise_error() is an enrichment provided by the Apstra template
           back-end.
        #}
        {% if vlan_ns.native_interfaces.get(intf_name) %}
            {# The 'do' keyword allows Jinja to execute a method directly without
               assigning it specifically to a variable #}
            {% do function.raise_error(
                'Error: vlans property set re-defining native vlan tag. Interface %s already has native vlan %s and vlan %s is a duplicate. There can only be one native vlan.' % (intf_name, vlan_id, vlan_ns.native_interfaces.get(intf_name))) %}
        {% endif %}
        {# Note that normally Jinja does not support direct dictionary value
           assignments, but in this use we can call a method of the python dict()
           object with .update() to work around this. #}
        {% do vlan_ns.native_interfaces.update({intf_name: vlan_id}) %}
    {% endfor %}
    {% if loop.first %}
vlans {
    {% endif %}
    vn{{ vlan_id }} {
        {# Descriptions are optional, this prevents rendering empty descriptions,
           or descriptions that would appear as literally 'description None' #}
        {% if vlan.get('description') %}
        description {{ vlan['description'] }};
        {% endif %}
        vlan-id {{ vlan_id }};
        {# In the CRB design, leafs do not have IRBs. All vxlan routing is
           performed at the spine layer. Avoid rendering an empty
           "l3-interface irb." command. #}
        {% set ipv4_address = vlan['systems'][hostname].get('ipv4_address') %}
        {% if ipv4_address or vlan.get('virtual_gateway_address') %}
        l3-interface irb.{{ vlan_id }};
        {% endif %}
        {# The data model supports non-vxlan enabled vlans as well, in which
           case vxlan_id can be None and not render a stanza. #}
        {% if vlan.get('vxlan_id') %}
        vxlan {
            vni {{ vlan['vxlan_id']}};
        }
        {% endif %}

    }
    {# close the vlans {} block, but only if at least one vlan rendered. #}
    {% if loop.last %}
}
    {% endif %}
{% endfor %}


protocols {
    evpn {
        encapsulation vxlan;
        default-gateway do-not-advertise;
        multicast-mode ingress-replication;
{# This for loop handles vni-options that are added to the system ID. #}
{% for vxlan_id in system_vlans|selectattr('vxlan_id')|map(attribute='vxlan_id')|map('int')|sort %}
{#                            ^                     ^                         ^          ^     ^
index which contains only-----|   vlans which have--|   Extract only vxlan_id-|  convert-| sort|
vlans that are relevant to        a vxlan_id            from the dict            to int
this system

For an example of why the template should convert a string to an int, consider:

>>> data = ['1', '2', '10', '20', '30']
>>> print(sorted(data))
['1', '10', '2', '20', '30']
>>> print(sorted([int(i) for i in data]))
[1, 2, 10, 20, 30]

In this case, config should use numerical sorting, not ascii/alphabetical sorting.

#}
        {% if loop.first %}
        vni-options {
        {% endif %}
            vni {{ vxlan_id }} {
            {# For convienence, the vrf-target is derived directly from the VNI ID. #}
                vrf-target target:{{ vxlan_id }}:1;
            }
    {% if loop.last %}
        }
    {% endif %}
{% endfor %}
        extended-vni-list all;
    }
}
{# Render IRB interfaces. In this example model, only systems with a non-empty 'ipv4_address' should render an IP. #}
{% for vlan in system_vlans if vlan.get('systems', {}).get(hostname, {}).get('ipv4_address') %}
    {% if loop.first %}
interfaces {
    irb {
    {% endif %}
    {% set vlan_id = vlan['vlan_id'] %}
    {% set ipv4_address = vlan['systems'][hostname]['ipv4_address'] %}
    {% set ipv4_virtual_gateway_address = vlan.get('ipv4_virtual_gateway_address') %}
        unit {{ vlan_id }} {
    {% if ipv4_virtual_gateway_address %}
            proxy-macip-advertisement;
            virtual-gateway-accept-data;
    {% endif %}
    {% if ipv4_address %}
            family inet {
            {# Differentiate between 'ipv4-address-only' and
               'ipv4-address with gateway', since the curly-brace notation is
               required if the address itself has more config underneath it.
               It is not valid to render address 1.1.1.1 {} #}
            {% if not ipv4_virtual_gateway_address %}
              address {{ ipv4_address }};
            {% elif ipv4_address and ipv4_virtual_gateway_address %}
                address {{ ipv4_address }} {
                    preferred;
                    virtual-gateway-address {{ ipv4_virtual_gateway_address }};
                }
            {% endif %}
            }
    {% endif %}
        }
    {% if loop.last %}
    }
}
    {% endif %}
{% endfor %}

{# L2 vlan tagging on front-panel interfaces.

Loop through all the interfaces in the 'interfaces' dict - this will contain
front-panel interface names (eg: et-0/0/1, et-0/0/2:2, ae1).
In one of the loops above, the `vlan_ns` namespace is populated with an index
of tagged interfaces & native interfaces that correspond to the 'vlans' property set.
The semantics of how a namespace work are documented above.

This loop is defensive - it will only render an 'interfaces' stanza if the interface
name during iteration is included in either one of these namespace caches.
Without this defense, this code would render an empty interfaces {} section.
#}
{% for interface in interfaces.itervalues() if interface['name'] in vlan_ns.tagged_interfaces or interface['name'] in vlan_ns.native_interfaces %}
    {% set native_vlan = vlan_ns.native_interfaces.get(interface['name']) %}
    {% set tagged_vlans = vlan_ns.tagged_interfaces.get(interface['name'], []) %}
    {% if 'bpdu-edge' in interface['link_tags'] %}
        {% do vlan_ns.rstp_interfaces.append(interface['name']) %}
    {% endif %}
    {% if loop.first %}
interfaces {
    {% endif %}
    {{ interface['name'] }} {
    {# Native vlan IDs are optional #}
    {% if native_vlan %}
        {% if native_vlan in tagged_vlans %}
            {% do function.raise_error('Native vlan ID %s is also included in tagged vlans %s' % (native_vlan, tagged_vlans)) %}
        {% endif %}
        native-vlan-id {{ native_vlan }};
    {% endif %}
        unit 0 {
            {% for vlan_id in tagged_vlans %}
                {% if loop.first %}
            family ethernet-switching {
                interface-mode trunk
                vlan {
                    members [
                {% endif %}
                        vn{{ vlan_id }}
                {% if loop.last %}
                    ]
                }
            }
                {% endif %}
            {% endfor %}
        }
    }
    {% if loop.last %}
}
    {% endif %}
{% endfor %}

{% for intf_name in vlan_ns.rstp_interfaces|sort %}
    {% if loop.first %}
protocols {
    rstp {
        bridge-priority 0;
    {% endif %}
        interface {{ intf_name }} {
            edge;
        }
    {% if loop.last %}
        bpdu-block-on-edge;
    }
}
    {% endif %}
{% endfor %}