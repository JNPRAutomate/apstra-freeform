{% set system_routing_instances = property_sets.get('routing_instances', {}).itervalues()|selectattr('systems', 'contains', hostname)|sort(attribute='vrf_name')|list %}
{% for routing_instance in system_routing_instances %}
    {# this list of irb_interfaces is a complicated construction that is designed to look up all IRBs that are bound to this system in order to render interface irb.X. #}
    {% set irb_interfaces = property_sets.get('vlans', {}).itervalues()|selectattr('systems', 'contains', hostname)|selectattr('vrf_name', 'eq', routing_instance['vrf_name'])|selectattr('systems.%s.ipv4_address' % hostname)|map(attribute='vlan_id')|sort|list %}
    {# The use of selectattr('systems', 'contains', hostname) will only return dicts in which this system based on its hostname exists in the 'vlans' property set. #}
    {# The next lookup is a selectattr method that allows us to traverse a bit deeper
       into that structure: vlans[vlan_id]['systems'][hostname]['ipv4_address']
       This is done with 'dotted' syntax that is available within jinja. Each
       'dotted' component maps to a dictionary key name.
       Here, we are only interested in the vlan ID that corresponds to the IRB
       name that crb_vlans.jinja renders.  Finally, we sort this value.
     #}
    {% if loop.first %}
routing-instances {
    {% endif %}
    {{ routing_instance['vrf_name'] }} {
        instance-type vrf;
        routing-options {
            multipath;
            auto-export;
        }
    {% set vrf_subintfs = namespace(subinterfaces=[]) %}
    {# The subinterfaces property set specifies subinterface IP addresses which
       are all assumed to speak BGP to a router in this example configuration
       template.

     "spine1": {
        "et-0/0/4": {
            "2": {
                "vlan_id": 2,
                "vrf_name": "red",
                "description": "VRF Red to router",
                "ipv4_address": "172.16.2.0/31",
                "neighbor_address": "172.16.2.1/31",
            },
        }
    }
#}
    {% for parent_interface, subinterfaces in function.sorted_dict(property_sets.get('bgp_subinterfaces', {}).get(hostname, {})) if parent_interface in interfaces and subinterfaces %}
        {% for subinterface in subinterfaces.itervalues()|sort(attribute='vlan_id') if subinterface['vrf_name'] == routing_instance['vrf_name'] %}
            {# vrf_subinterfaces.subinterface will contain a list of
               [parent_interface, subinterface] dictionaries.
               the parent_interface is the interface as rendered by the device
               model context 'interfaces' key.  This is used to look up the neighbor
               system hostname & the neigbhor's asn from the bgp_asns property-set.
               This index is required to be in a namespace because multiple
               dictionary iterations are required in order to index the interfaces
               dict and the subinterfaces property set values together.
            #}
            {% do vrf_subintfs.subinterfaces.append([interfaces[parent_interface], subinterface]) %}
        {% endfor %}
    {% endfor %}
        protocols {
            bgp {
                group l3rtr {
                    type external;
                    multipath {
                        multiple-as;
                    }
                {% for parent_interface, subinterface in vrf_subintfs.subinterfaces %}
                    {% if subinterface.get('neighbor_address') and subinterface.get('ipv4_address') %}
                    neighbor {{ subinterface['neighbor_address'].split('/')[0] }} {
                        description "{{ subinterface['description'] }}";
                        multihop {
                            ttl 1;
                        }
                        local-address {{ subinterface['ipv4_address'].split('/')[0] }};
                        import ( RoutesToExt );
                        family inet {
                            unicast;
                        }
                        peer-as {{ subinterface['neighbor_asn'] }};
                        bfd-liveness-detection {
                            minimum-interval 1000;
                            multiplier 3;
                        }
                        export ( RoutesFromExt );
                    }
                    {% endif %}
                {% endfor %}
                }
            }
            evpn {
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ routing_instance['vxlan_id'] }};
                    export BGP-AOS-Policy;
                }
            }
        }
        {% set loopback = property_sets.get('loopbacks', {}).get(hostname) %}
        {% if not loopback %}
            {% do function.raise_error('Routing-instance requires the system loopback IP address to be included in the loopbacks property set') %}
        {% endif %}
        {% for irb_vlan_id in irb_interfaces|sort %}
        interface irb.{{ irb_vlan_id }};
        {% endfor %}
        {% for parent_interface, subinterface in vrf_subintfs.subinterfaces|sort %}
        interface {{ parent_interface['name'] }}.{{ subinterface['vlan_id'] }};
        {% endfor %}
        route-distinguisher {{ loopback }}:{{ routing_instance['vlan_id'] }};
        vrf-target target:{{ routing_instance['vxlan_id'] }}:1;
        vrf-table-label;
    }
    {% if loop.last %}
}
    {% endif %}
{% endfor %}